---
output: html_document
editor_options: 
  chunk_output_type: console
---
# Setup
```{r message=FALSE, warning=FALSE}
# Source files and packages
source(here::here("R/_setup.R"))

reticulate::use_condaenv(condaenv = "rgee_py")
rgee_environment_dir <-  "/Users/pascal/anaconda3/envs/rgee_py/bin"

library(rgee)
library(stars)
library(sf)
ee_Initialize(drive = TRUE)
```

# Load Data
```{r}
load_or_save_latest_file("nfi_dataset_for_analysis", "load")
df <- nfi_dataset_for_analysis
```

# Extract coords
```{r}
df_xy    <- df |> ungroup() |> select(lat, lon) |> distinct() |> mutate(site_name = row_number())
df_years <- df |> select(campagne_1, campagne_2) |> flatten() |> unlist() |> unique() |> sort()
```

# Get data from GEE

## NDVI

```{r}
library(rgee)
library(stars)
library(sf)

ee_Initialize(drive = TRUE)

sf_france <- get_shapefile_france(outer_border_only = TRUE)
box_fr    <- st_bbox(sf_france)

# Set region of interest
ROI <- c(
  box_fr$xmin,
  box_fr$ymin,
  box_fr$xmax,
  box_fr$ymin,
  box_fr$xmax,
  box_fr$ymax,
  box_fr$xmin,
  box_fr$ymax,
  box_fr$xmin,
  box_fr$ymin
)

ee_ROI <-
  matrix(ROI, ncol = 2, byrow = TRUE) %>%
  list() %>%
  st_polygon() %>%
  st_sfc() %>%
  st_set_crs(4326) %>%
  sf_as_ee()

# Get the mean annual NDVI for 2011
cloudMaskL457 <- function(image) {
  qa <- image$select("pixel_qa")
  cloud <- qa$bitwiseAnd(32L)$And(qa$bitwiseAnd(128L))$Or(qa$bitwiseAnd(8L))
  mask2 <- image$mask()$reduce(ee$Reducer$min())
  image <- image$updateMask(cloud$Not())$updateMask(mask2)
  image$normalizedDifference(list("B4", "B3"))
}

ic_l5 <- 
  ee$ImageCollection("LANDSAT/LT05/C01/T1_SR")$filterBounds(ee$FeatureCollection(ee_ROI))$filterDate("2011-01-01", "2011-12-31")$map(cloudMaskL457)

# Create simple composite
mean_l5 <- ic_l5$mean()$rename("NDVI")
mean_l5 <- mean_l5$reproject(crs = "EPSG:4326", scale = 500)
mean_l5_Amarakaeri <- mean_l5$clip(ee_ROI)

# Move results from Earth Engine to GoogleDrive (not to local storage yet!)
task_img <- ee_image_to_drive(
  image = mean_l5_Amarakaeri,
  fileFormat = "GEO_TIFF",
  region = ee_ROI,
  fileNamePrefix = "my_image_demo",
  folder = "rgee_backup"
)

task_img$start()
ee_monitoring(task_img)

# NOTE: It takes some time until the file appears on GoogleDrive, so the following command
# might not work immediately!
# Move results from Drive to local storage
ee_drive_to_local(task = task_img,
                  dsn  = here("test.tif"))

## End(Not run)
```


```{r}
# Create a date range for the specified time period
start_date <- "2010-01-01"
end_date <- "2011-12-31"
date_range <- ee$DateRange(start_date, end_date)

# Create an ImageCollection filtered by date and region
ndvi_collection <- ee$ImageCollection("MODIS/MOD09GA_006_NDVI") %>%
  ee$filterDate(date_range) %>%
  ee$filterBounds(ROI)

# Get the median NDVI for each day in the collection
median_ndvi <- ndvi_collection %>%
  ee$median()

# Print the resulting image
print(median_ndvi)

```


## Example from ?ee_image_to_drive (Do not touch!)
```{r}
# Example from ?ee_image_to_drive
## Not run: 
library(rgee)
library(stars)
library(sf)

# ee_users()
ee_Initialize(drive = TRUE)

# Define study area (local -> earth engine)
# Communal Reserve Amarakaeri - Peru
rlist <- list(xmin = -71.13, xmax = -70.95,ymin = -12.89, ymax = -12.73)
ROI <- c(rlist$xmin, rlist$ymin,
         rlist$xmax, rlist$ymin,
         rlist$xmax, rlist$ymax,
         rlist$xmin, rlist$ymax,
         rlist$xmin, rlist$ymin)

ee_ROI <- matrix(ROI, ncol = 2, byrow = TRUE) %>%
  list() %>%
  st_polygon() %>%
  st_sfc() %>%
  st_set_crs(4326) %>%
  sf_as_ee()


# Get the mean annual NDVI for 2011
cloudMaskL457 <- function(image) {
  qa <- image$select("pixel_qa")
  cloud <- qa$bitwiseAnd(32L)$
    And(qa$bitwiseAnd(128L))$
    Or(qa$bitwiseAnd(8L))
  mask2 <- image$mask()$reduce(ee$Reducer$min())
  image <- image$updateMask(cloud$Not())$updateMask(mask2)
  image$normalizedDifference(list("B4", "B3"))
}

ic_l5 <- ee$ImageCollection("LANDSAT/LT05/C01/T1_SR")$
  filterBounds(ee$FeatureCollection(ee_ROI))$
  filterDate("2011-01-01", "2011-12-31")$
  map(cloudMaskL457)

# Create simple composite
mean_l5 <- ic_l5$mean()$rename("NDVI")
mean_l5 <- mean_l5$reproject(crs = "EPSG:4326", scale = 500)
mean_l5_Amarakaeri <- mean_l5$clip(ee_ROI)

# Move results from Earth Engine to GoogleDrive (not to local storage yet!)
task_img <- ee_image_to_drive(
  image = mean_l5_Amarakaeri,
  fileFormat = "GEO_TIFF",
  region = ee_ROI,
  fileNamePrefix = "my_image_demo",
  folder = "rgee_backup"
)

task_img$start()
ee_monitoring(task_img)

# Move results from Drive to local storage
ee_drive_to_local(
  task = task_img,
  dsn  = c(here("test.tif"))
  )

## End(Not run)
```

```{r}
# Plot data
ndvi_raster <- raster(here("test.tif"))
# plot(ndvi_raster, main = "NDVI 2005-2006")

# Turn raster into plottable dataframe
df_ndvi <- as.data.frame(ndvi_raster,xy = TRUE)

# Plot it
ggplot() +
  geom_tile(
    data = df_ndvi,
    aes(
      x = x,
      y = y,
      fill = NDVI
    )
  ) +
  # geom_sf(data = sf_france) +
  # xlim(-71.25, -70.85) +
  scale_fill_viridis_c(direction = -1) +
  theme_classic()
```

```{r}
ggplot() +
  geom_sf(data = sf_france)
```


```{r}
library(rgee)
library(raster)

# Initialize a specific Earth Engine account and load
# either Google Drive or Google Cloud Storage credentials
# ee_reattach()
# ee_Initialize(
#   email = "data.colec.fbf@gmail.com",
#   drive = TRUE
# )

# Load a Landsat 8 image.
image = ee$Image('LANDSAT/LC08/C01/T1_TOA/LC08_044034_20140318')

# Compute the EVI using an expression.
evi = image$expression(
  expression = '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))',
  opt_map =  list(
    'NIR' = image$select('B5'),
    'RED' = image$select('B4'),
    'BLUE' = image$select('B2')
  )
)

Map$centerObject(image, 9)
Map$addLayer(evi, list(min = -1, max = 1, palette = c('FF0000', '00FF00')))

img_rs <- ee_image_as_raster(
  image = evi, 
  scale = 1000,
  region = image$geometry(),
  via = "drive"
)
# ee_manage_cancel_all_running_task() [cancel your EE tasks!]
plot(img_rs)
```

## L8 TOA Reflectance RGB
STATUS: WORKING
```{r}
# Get France
sf_france <- get_shapefile_france(outer_border_only = TRUE)
box_fr    <- st_bbox(sf_france)

# Set region of interest
ROI <- c(
  box_fr$xmin,
  box_fr$ymin,
  box_fr$xmax,
  box_fr$ymin,
  box_fr$xmax,
  box_fr$ymax,
  box_fr$xmin,
  box_fr$ymax,
  box_fr$xmin,
  box_fr$ymin
)

ee_ROI <-
  matrix(ROI, ncol = 2, byrow = TRUE) %>%
  list() %>%
  st_polygon() %>%
  st_sfc() %>%
  st_set_crs(4326) %>%
  sf_as_ee()

# ______________________________________________________________________________
# Get collection
my_col <- "LANDSAT/LC08/C02/T1_RT_TOA"

image_col <- ee$ImageCollection(my_col)
image_col <- image_col$filterBounds(ee_ROI) 
image_col <- image_col$filterDate("2017-01-01", "2017-12-31")
image_col <- image_col$filterMetadata("CLOUD_COVER",
                                      "less_than",
                                      1)

image_med <- image_col$median()

Map$setCenter(
    lat = 47.14928360421266,
    lon = 2.338441014289856,
    zoom = 5
  )

Map$addLayer(
  image_med,
  visParams = list(
    bands = c("B4", "B3", "B2"),
    max   = 0.167738823290822,
    min   = 0.0076780309565747384
    )
  )
```

## Consecutive Dry Days
STATUS: NOT WORKING BECAUSE OF remap() command, I think...
```{r}
# REGION OF INTEREST
# Get France
sf_france <- get_shapefile_france(outer_border_only = TRUE)
box_fr    <- st_bbox(sf_france)

# Set region of interest
r_roi <- c(
  box_fr$xmin,
  box_fr$ymin,
  box_fr$xmax,
  box_fr$ymin,
  box_fr$xmax,
  box_fr$ymax,
  box_fr$xmin,
  box_fr$ymax,
  box_fr$xmin,
  box_fr$ymin
)

roi <-
  matrix(r_roi, ncol = 2, byrow = TRUE) %>%
  list() %>%
  st_polygon() %>%
  st_sfc() %>%
  st_set_crs(4326) %>%
  sf_as_ee()
```

```{r}
my_col    <- "NOAA/PERSIANN-CDR"
image_col <- ee$ImageCollection(my_col)
image_col <- image_col$filterBounds(roi)
image_col <- image_col$filterDate("2020-01-01", "2021-01-01")

image_init <-
  ee$
  Image$
  constant(0)$
  rename("precipitation")$
  cast(list("precipitation" = "long")) # In javascript, the list is a dictionary {... : ...}

calc_dry_days <- function(current, previous){
  mask     <- current$remap(list(0), 
                            list(1),
                            0)
  last_img <- ee$Image(ee$List(previous)$get(-1))
  updated  <- last_img$add(mask)$multiply(mask)

  return(ee$List(previous)$add(updated))
}

img_final <- 
  ee$List(
    image_col$iterate(
      algorithm = calc_dry_days,
      first     = ee$List(list(image_init))
    )
  )

res_coll  <- ee$ImageCollection(img_final)
res_image <- res_coll$max()


# ee_image_to_drive(
#       image = image,
#       fileFormat = "GEO_TIFF",
#       region = roi,
#       scale  = 11131.95,
#       crs    = "EPSG:4326",
#       description = paste0("request_", i, "_from_", ctime),
#       folder = "rgee/ifna",
#       fileNamePrefix = my_filename,
#       timePrefix = FALSE
#     )

# Map$setCenter(
#     lat = 47.14928360421266,
#     lon = 2.338441014289856,
#     zoom = 5
#   )

# Map$addLayer(res_image)
# Move results from Earth Engine to GoogleDrive (not to local storage yet!)

task_img <- ee_image_to_drive(
      image = res_image$float(),
      fileFormat = "GEO_TIFF",
      region = roi,
      scale  = 27829.87,
      crs    = "EPSG:4326",
      description = "CDD",
      folder = "rgee/ifna",
      fileNamePrefix = "CDD",
      timePrefix = TRUE
    )

task_img$start()
ee_monitoring(task_img)

# NOTE: It takes some time until the file appears on GoogleDrive, so the following command
# might not work immediately!
# Move results from Drive to local storage
ee_drive_to_local(task = task_img,
                  dsn  = here("cdd.tif"))

# Plot it
tmp_raster <- raster(here("cdd.tif"))
# plot(ndvi_raster, main = "NDVI 2005-2006")

# Turn raster into plottable dataframe
tmp_df <- as.data.frame(tmp_raster,xy = TRUE)

# Plot it
ggplot() +
  geom_tile(
    data = tmp_df,
    aes(
      x = x,
      y = y,
      fill = precipitation
    )
  ) +
  geom_sf(data = sf_france, 
          fill = NA,
          lwd  = 1,
          color = "red") +
  # xlim(-71.25, -70.85) +
  scale_fill_viridis_c(limits = c(5, 22.5)) +
  theme_classic()
```

## ERA5
```{r}
# REGION OF INTEREST
# Get France
sf_france <- get_shapefile_france(outer_border_only = TRUE)
box_fr    <- st_bbox(sf_france)

# Set region of interest
r_roi <- c(
  box_fr$xmin,
  box_fr$ymin,
  box_fr$xmax,
  box_fr$ymin,
  box_fr$xmax,
  box_fr$ymax,
  box_fr$xmin,
  box_fr$ymax,
  box_fr$xmin,
  box_fr$ymin
)

roi <-
  matrix(r_roi, ncol = 2, byrow = TRUE) %>%
  list() %>%
  st_polygon() %>%
  st_sfc() %>%
  st_set_crs(4326) %>%
  sf_as_ee()

roi
```

```{r}
# TIME OF INTEREST
# I want three-monthly segments from 2015 and 2016
toi <- seq(as.Date("2009-12-01"), as.Date("2021-12-01"), by = "3 months")
toi <- format(toi, "%Y-%m-%d")
```

```{r}
# LOOP VARS

# Set variable
my_data  <- "ECMWF/ERA5_LAND/HOURLY"
my_var <- "temperature_2m"

# Other vars

if (my_data == "ECMWF/ERA5_LAND/HOURLY") {
  all_vars <- c(
    ""
  )
  my_scale <- 11131.95
}

# Start loop
i <- 1
tasks <- list()
filenames <- list()

for (i in 2:length(toi) - 1) {
  
  # Verbose
  # cat("\n----------------------------------------------------------------------------",
  #     "\nWorking on ", i, "/", length(toi)-1
  #     )
  
  # Get dates
  date_start <- toi[i]
  date_end   <- toi[i + 1]
  
  # Specify function for aggregation:
  function_to_apply <- "Mean"
  
  # Get time of creation
  ctime <- format(Sys.time(), "%Y-%m-%d_%H%M%S")
  
  # Get filename
  my_filename <- 
    paste0(
        "[", 
        "created-", ctime , "]-[",
        "rgee_", str_replace_all(my_data, "/", "-"), "_", my_var, "]-[",
        "applied_fct-", function_to_apply, "]-[",
        "", date_start, "_to_", date_end, 
        "]"
        )
  
  # Define task
  image <- 
    ee$
    ImageCollection(my_data)$
    select(my_var)$
    filterBounds(roi)$
    filterDate(date_start,
               date_end)$
    mean()
  
  # Write to drive
  tasks[[i]] <- 
    ee_image_to_drive(
      image = image,
      fileFormat = "GEO_TIFF",
      region = roi,
      scale  = 11131.95,
      crs    = "EPSG:4326",
      description = paste0("request_", i, "_from_", ctime),
      folder = "rgee/ifna",
      fileNamePrefix = my_filename,
      timePrefix = FALSE
    )
  
  # Start task
  filenames[[i]] <- my_filename
  tasks[[i]]$start()
}

# Monitor gee 
ee_monitoring(eeTaskList = TRUE)
```


```{r}
# ⚠️ WRITING TO LOCAL CAN ONLY BE DONE WHEN ALL FILES WERE UPLOADED TO DRIVE
# THIS MIGHT TAKE SOME WHILE!
# Write to local
for (i in 2:length(toi) - 1) {
  print(i)
  ee_drive_to_local(
    task = tasks[[i]], 
    dsn = paste0(
      here("data/raw/gee"), 
      "/", 
      filenames[[i]], 
      ".tif")
    )
}


# Improvements for the loop:
# - Subloop to go over multiple variables of the same dataset
# - Ifelse statements for different manipulations
```

